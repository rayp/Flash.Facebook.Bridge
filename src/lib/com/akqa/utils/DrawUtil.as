package com.akqa.utils {	import flash.text.TextFormat;		import flash.text.TextFieldAutoSize;		import flash.text.TextField;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.DisplayObject;	import flash.display.GradientType;	import flash.display.Shape;	import flash.display.Sprite;	import flash.geom.Matrix;		public class DrawUtil 	{		public static function drawWireFrame ( target : DisplayObject, w : int, h : int, label : String = "FPO", fillColor : uint = undefined, lineColor : uint = 0xFFFFFF ) : void		{			if ( !fillColor ) fillColor = 0xFFFFFF * Math.random( );			if ( target is Shape )			{				var shape : Shape = target as Shape;								shape.graphics.clear( );				shape.graphics.lineStyle( 1, lineColor );				shape.graphics.beginFill( fillColor );				shape.graphics.drawRect( 0, 0, w, h );				shape.graphics.lineTo( w, h );				shape.graphics.moveTo( w, 0 );				shape.graphics.lineTo( 0, h );				shape.graphics.endFill( );			}			if ( target is Sprite )			{				var sprite : Sprite = target as Sprite;								sprite.graphics.clear( );				sprite.graphics.lineStyle( 1, lineColor );				sprite.graphics.beginFill( fillColor );				sprite.graphics.drawRect( 0, 0, w, h );				sprite.graphics.lineTo( w, h );				sprite.graphics.moveTo( w, 0 );				sprite.graphics.lineTo( 0, h );				sprite.graphics.endFill( );								if ( label )				{					var tf : TextField = new TextField( );					tf.text = label;					tf.multiline = true;					tf.background = true;					tf.backgroundColor = lineColor;					tf.autoSize = TextFieldAutoSize.LEFT;					tf.textColor = 0x333333;					tf.setTextFormat( new TextFormat( "_sans", 11 ) );					tf.x = int( ( w - tf.width ) * .5 );					tf.y = int( ( h - tf.height ) * .5 );										sprite.addChild( tf );				}			}		}		public static function drawBox ( target : DisplayObject, w : int, h : int, color : int = -1 ) : void		{			var alpha : Number = 1;			if ( color < 0 ) color = alpha = 0;						if ( target is Shape )			{				var shape : Shape = target as Shape;								shape.graphics.clear( );				shape.graphics.beginFill( color, alpha );				shape.graphics.drawRect( 0, 0, w, h );				shape.graphics.endFill( );			}			if ( target is Sprite )			{				var sprite : Sprite = target as Sprite;								sprite.graphics.clear( );				sprite.graphics.beginFill( color, alpha );				sprite.graphics.drawRect( 0, 0, w, h );				sprite.graphics.endFill( );			}		}		public static function drawTriangle ( target : DisplayObject, w : int, h : int, color : int = -1 ) : void		{			var alpha : Number = 1;			if ( color < 0 ) color = alpha = 0;						if ( target is Shape )			{				var shape : Shape = target as Shape;								shape.graphics.clear( );				shape.graphics.beginFill( color, alpha );				shape.graphics.lineTo( w, 0 );				shape.graphics.lineTo( w * .5, h );				shape.graphics.lineTo( 0, 0 );				shape.graphics.endFill( );			}			if ( target is Sprite )			{				var sprite : Sprite = target as Sprite;								sprite.graphics.clear( );				sprite.graphics.beginFill( color, alpha );				sprite.graphics.lineTo( w, 0 );				sprite.graphics.lineTo( w * .5, h );				sprite.graphics.lineTo( 0, 0 );				sprite.graphics.endFill( );			}		}		public static  function getReflection ( ob : DisplayObject, height : int = 100 ) : Sprite		{			var width : int = ob.width + 1;			var flipMatrix : Matrix = new Matrix( );			flipMatrix.scale( 1, -1 );			flipMatrix.translate( 0, ob.height );						var bitmapData : BitmapData = new BitmapData( width, height, true, 0 );			bitmapData.draw( ob, flipMatrix );									var type : String = GradientType.LINEAR;			var colors : Array = [ 0x00FF00, 0xFF0000 ];			var alphas : Array = [ .5, 0 ];			var ratios : Array = [ 0, 255 ];			var matrix : Matrix = new Matrix( );			matrix.createGradientBox( width, height, 90 * ( Math.PI / 180 ) );						var m : Shape = new Shape( );			m.cacheAsBitmap = true;			m.graphics.beginGradientFill( type, colors, alphas, ratios, matrix );					m.graphics.drawRect( 0, 0, width, height );					m.graphics.endFill( );							var b : Bitmap = new Bitmap( bitmapData );			b.cacheAsBitmap = true;				b.mask = m;			var r : Sprite = new Sprite( );			r.addChild( b );			r.addChild( m );						return r;		}	}}